#!/usr/bin/env python
import pandas as pd
import matplotlib.pyplot as plt
import yaml
import numpy as np
import math
import sys

def pdg_scatter_theta( mom, beta = 1.0, nrad  = 1.0, z = 1.0 ):
    '''Return rms width of projected angular distribution

import math
    mom  -- particle momentum in MeV 
    beta -- particle velocity
    nrad -- number of radiation lengths( x / X0 )
    z    -- particle charge

    http://pdg.lbl.gov/2014/reviews/rpp2014-rev-passage-particles-matter.pdf
    32.3. Multiple scattering through small angles '''
    p  = 1000.0 *mom
    b = beta
    N = nrad

    return 13.6  / ( b * p ) * z * np.sqrt( N ) * ( 1 + 0.038*math.log( N ) )

def get_na62_scatter(  beta = 1.0, nrad  = 1.0, z = 1.0 ):
    '''Returns a function to produce scattering vs momentum

    beta -- particle velocity
    nrad -- number of radiation lengths( x / X0 )
    z    -- particle charge

    result is phi not theta ( see PDG Figure 32.10 ) - the factor 3.0
    converts between the two.'''

    def mom_scatter( mom ):
        return pdg_scatter_theta( mom, beta, nrad / 3.0, z )

    return mom_scatter

l_lkr = 123.0 #cm
l_hac = 120.0 #cm
l_iron = 80.0 #cm

x_lkr = 1.76 #cm
x_iron = 4.70 #cm

nrad_1 = l_lkr / x_lkr + l_hac / x_iron + l_iron / x_iron

print( nrad_1 )

z_dch =  11880.2
z_lkr = 12108.2
z_muv = 12902.8

na62_scatter_1 = get_na62_scatter( 1.0, nrad_1, z_muv - z_lkr )


def na62_dch_res( mom ):
    return ( 0.1 + 8.5 * 1000.0 /( 1000.0 *  mom )   )  / 10000.0  * ( z_muv - z_dch )

mom = np.arange( 5, 65, 0.1 )

fig = plt.figure( figsize = [8, 6] )
fig.set_tight_layout(True)
ax = fig.add_subplot( 111 )
ax.grid( 'on' )

ax.set_yscale( 'log' )

print( na62_scatter_1(20) )

ax.plot( mom, na62_scatter_1( mom ), '-', color ='k', lw = 2, label = 'Scattering' )
ax.plot( mom, na62_dch_res( mom ), '--', color ='k', lw = 2, label = 'DCH' )

ax.set_xlabel( 'Momentum (GeV)' )
ax.set_ylabel( 'Error (cm)' )

handles, labels = ax.get_legend_handles_labels()
plt.legend( handles, labels , loc = 'upper right')


plt.savefig( 'output/scattering.pdf', format = 'pdf' , transparent = 'true' )
